name: Cabal Build

# Trigger the workflow on push or pull request, but only for the master branch
on: [push, pull_request]
  # pull_request:
  #   branches: [master]
  # push:
  #   branches: [master, dev-1.4]

jobs:
  build:
    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        cabal: ["3.2.0"]
        ghc: ["8.10.2"]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-haskell@v1.1
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - uses: actions/cache@v1
      name: Cache cabal-store
      with:
        path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal

    # - name: Build
    #   run: |
    #     mkdir bin
    #     cabal install --install-method=copy --installdir=bin

    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir bin
        cabal install --install-method=copy --installdir=bin
        ldd bin/pboy || true
        echo ${{ github.event.release.tag_name }}

      # cabal build --ghc-options='-optl-static' --ld-options='-static -pthread'

    - name: Build MacOS
      if: matrix.os == 'macOS-latest'
      run: |
        mkdir bin
        cabal install --install-method=copy --installdir=bin
        echo ${{ github.event.release.tag_name }}

    - name: Compress binaries
      uses: svenstaro/upx-action@v2
      with:
        file: bin/pboy
        args: --best
        strip: true

    - name: Publish Release Binaries
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: bin/pboy
        asset_name: pboy
        tag: ${{ github.ref }}
        overwrite: true
        body: "This is my release text"

    #     mkdir bin
    #     cabal build --install-method=copy --installdir=bin
    # export BIN=$(cabal exec -- which pboy)
    # ls -lh $BIN
    # strip $BIN && ls -lh $BIN
    # ldd $BIN || true

    # - name: Build MacOS
    #   if: matrix.os == 'macOS-latest'
    #   run: |
    #     mkdir bin
    #     cabal build
    # export BIN=$(cabal exec -- which pboy)
    # ls -lh $BIN
    # strip $BIN && ls -lh $BIN
    # otool -L $BIN

    # - name: Check Linux
    #   if: matrix.os == 'ubuntu-latest'
    #   run: |
    #     ldd $PBOY_BIN

    # - name: Check MacOS
    #   if: matrix.os == 'macOS-latest'
    #   run: |
    #     otool -L $PBOY_BIN
